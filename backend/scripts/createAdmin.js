/**
 * ============================================
 * SCRIPT DE CREACI√ìN DE USUARIO ADMINISTRADOR
 * ============================================
 *
 * Este script crea un usuario con privilegios de administrador en la base de datos.
 * Es √∫til para configurar el sistema por primera vez o recuperar acceso administrativo.
 *
 * C√ìMO USAR ESTE SCRIPT:
 * ----------------------
 * 1. Aseg√∫rate de tener configuradas las variables de entorno en el archivo .env
 * 2. Desde la carpeta 'backend', ejecuta en la terminal:
 *    node scripts/createAdmin.js
 * 3. El script se conectar√° a MongoDB y crear√° el usuario admin
 * 4. Si el usuario ya existe, te lo informar√° sin crear duplicados
 * 5. Guarda las credenciales mostradas en consola
 *
 * IMPORTANTE - SEGURIDAD:
 * -----------------------
 * - Cambia la contrase√±a predeterminada 'admin123' antes de usar en producci√≥n
 * - Modifica el email admin@negromate.com por uno real
 * - Despu√©s del primer login, cambia la contrase√±a desde el perfil de usuario
 * - No compartas las credenciales del admin p√∫blicamente
 *
 * QU√â HACE EL SCRIPT:
 * -------------------
 * 1. Conecta a MongoDB Atlas usando las credenciales del archivo .env
 * 2. Verifica si ya existe un usuario admin con el email especificado
 * 3. Si no existe, hashea la contrase√±a usando bcrypt (10 rondas de salt)
 * 4. Crea el usuario en la colecci√≥n 'users' con role: 'admin'
 * 5. Muestra las credenciales de acceso en consola
 * 6. Cierra la conexi√≥n y termina el proceso
 *
 * @module scripts/createAdmin
 * @requires mongoose - Cliente de MongoDB para Node.js
 * @requires bcrypt - Librer√≠a de hashing de contrase√±as
 * @requires ../db/models/User.model - Modelo de datos de usuarios
 * @requires ../config/config - Variables de entorno
 */

import mongoose from 'mongoose';
import bcrypt from 'bcrypt';
import User from '../db/models/User.model.js';
import { DB_USER, DB_PASS, CLUSTER, DATABASE } from '../config/config.js';

/**
 * Funci√≥n principal que crea el usuario administrador
 * Es as√≠ncrona porque realiza operaciones de base de datos
 */
const createAdminUser = async () => {
    // Construir la URL de conexi√≥n a MongoDB Atlas
    // Formato: mongodb+srv://usuario:contrase√±a@cluster/basededatos?opciones
    const url = `mongodb+srv://${DB_USER}:${DB_PASS}@${CLUSTER}/${DATABASE}?retryWrites=true&w=majority`;

    try {
        // === PASO 1: CONECTAR A MONGODB ATLAS ===
        await mongoose.connect(url);
        console.log("‚úÖ Conectado a MongoDB Atlas");

        // === PASO 2: DEFINIR DATOS DEL USUARIO ADMIN ===
        // IMPORTANTE: Cambia estos valores antes de ejecutar en producci√≥n
        const adminData = {
            username: 'admin',                      // Nombre de usuario para login
            email: 'admin@negromate.com',          // Email del administrador
            password: 'admin123',                   // Contrase√±a en texto plano (ser√° hasheada)
            role: 'admin'                          // Rol que otorga privilegios administrativos
        };

        // === PASO 3: VERIFICAR SI EL ADMIN YA EXISTE ===
        // Buscar en la base de datos si ya hay un usuario con este email
        // Esto previene la creaci√≥n de admins duplicados
        const adminExists = await User.findOne({ email: adminData.email });

        if (adminExists) {
            // Si existe, mostrar informaci√≥n y salir sin crear nada
            console.log("‚ö†Ô∏è El usuario admin ya existe en la base de datos.");
            console.log(`Email: ${adminExists.email}`);
            console.log(`Role: ${adminExists.role}`);
            process.exit(0); // Salir con c√≥digo 0 (√©xito)
        }

        // === PASO 4: ENCRIPTAR LA CONTRASE√ëA ===
        // Nunca almacenar contrase√±as en texto plano en la base de datos
        // bcrypt.genSalt(10) genera un "salt" aleatorio con 10 rondas de complejidad
        const salt = await bcrypt.genSalt(10);
        // bcrypt.hash() combina la contrase√±a con el salt para crear el hash final
        const hashedPassword = await bcrypt.hash(adminData.password, salt);

        // === PASO 5: CREAR EL USUARIO ADMIN EN LA BASE DE DATOS ===
        // User.create() es un m√©todo de Mongoose que inserta un nuevo documento
        const adminUser = await User.create({
            username: adminData.username,
            email: adminData.email,
            password: hashedPassword,              // Guardar la contrase√±a hasheada
            role: 'admin'
        });

        // === PASO 6: MOSTRAR CONFIRMACI√ìN Y CREDENCIALES ===
        console.log("‚úÖ Usuario admin creado exitosamente!");
        console.log("=======================================");
        console.log(`ID: ${adminUser._id}`);              // MongoDB ObjectId del usuario
        console.log(`Username: ${adminUser.username}`);
        console.log(`Email: ${adminUser.email}`);
        console.log(`Role: ${adminUser.role}`);
        console.log("=======================================");
        console.log("\nüîê Credenciales de acceso:");
        console.log(`Email: ${adminData.email}`);
        console.log(`Password: ${adminData.password}`);   // Mostrar contrase√±a original (no hasheada)
        console.log("\n‚ö†Ô∏è IMPORTANTE: Cambia la contrase√±a despu√©s del primer login");

        // Salir del proceso con c√≥digo 0 (√©xito)
        process.exit(0);

    } catch (error) {
        // Si algo sale mal (error de conexi√≥n, validaci√≥n, etc.), mostrarlo en consola
        console.error("‚ùå Error al crear usuario admin:", error);
        process.exit(1); // Salir con c√≥digo 1 (error)
    }
};

// Ejecutar la funci√≥n principal del script
// Este c√≥digo se ejecuta inmediatamente cuando se corre el archivo
createAdminUser();
